{"version":3,"sources":["components/Input.js","components/List.js","components/TodoList.js","index.js"],"names":["Input","htmlFor","id","ref","inp","input","value","this","props","inpValue","type","onChange","handlChange","onClick","addTodo","Component","List","arr1","todos","filter","item","done","length","renderTodos","style","color","TodoList","e","setState","target","state","title","delTodo","idx","index","toggle","newTodos","JSON","parse","stringify","map","todo","checked","localStorage","setItem","className","ReactDOM","render","document","getElementById"],"mappings":"6KAGqBA,E,uKACP,IAAD,OACL,OAAO,6BACH,2BAAOC,QAAQ,OAAf,YACA,2BACIC,GAAG,MACHC,IAAK,SAAAC,GAAG,OAAE,EAAKC,MAAMD,GACrBE,MAAOC,KAAKC,MAAMC,SAClBC,KAAK,OACLC,SAAUJ,KAAKC,MAAMI,cAEzB,4BAAQC,QAASN,KAAKC,MAAMM,SAA5B,qB,GAXuBC,aCAdC,E,uKAEb,IAAIC,EAAOV,KAAKC,MAAMU,MAAMC,QAAO,SAAAC,GAAI,OAAEA,EAAKC,QAC9C,OACA,6BACI,uDAASJ,EAAKK,QACd,4BACKf,KAAKC,MAAMe,aAAY,IAE5B,wDACA,wBAAIC,MAAO,CAACC,MAAgB,UACvBlB,KAAKC,MAAMe,aAAY,S,GAXNR,aCEbW,E,kDAEjB,aAAc,IAAD,8BACT,gBASJd,YAAY,SAACe,GACT,EAAKC,SAAS,CAACnB,SAASkB,EAAEE,OAAOvB,SAXxB,EAsBbQ,QAAQ,WACqB,KAAtB,EAAKgB,MAAMrB,WAGd,EAAKmB,SAAS,CACVV,MAAM,CACF,CACIa,MAAO,EAAKD,MAAMrB,SAClBY,MAAM,IAHT,mBAKE,EAAKS,MAAMZ,UAGtB,EAAKU,SAAS,CAACnB,SAAS,OAnCf,EAqCbuB,QAAQ,SAACC,GACL,EAAKL,SAAS,CACVV,MAAM,EAAKY,MAAMZ,MAAMC,QAAO,SAACC,EAAKc,GAAN,OAAcA,IAAUD,QAvCjD,EA2CbE,OAAO,SAACF,GACJ,IAAIG,EAAWC,KAAKC,MAAMD,KAAKE,UAAU,EAAKT,MAAMZ,QACpDkB,EAASH,GAAKZ,MAAQe,EAASH,GAAKZ,KACpC,EAAKO,SAAS,CACVV,MAAMkB,KA/CD,EAkDbb,YAAY,SAACF,GAET,OAAO,EAAKS,MAAMZ,MAAMsB,KAAI,SAACC,EAAKR,GAC9B,GAAGZ,IAAOoB,EAAKpB,KACX,OACI,4BACA,2BAAOR,QAAS,kBAAI,EAAKsB,OAAOF,IAAMS,QAASrB,EAAMX,KAAK,aAC1D,8BAAO+B,EAAKV,OACZ,4BAAQlB,QAAS,kBAAI,EAAKmB,QAAQC,KAAlC,qBAxDZ,EAAKH,MAAM,CACPrB,SAAS,GACTS,MAAM,IAJD,E,iEAgBTyB,aAAaC,QACT,QACAP,KAAKE,UAAUhC,KAAKuB,MAAMZ,U,+BA8CxB,IAAD,EACkBX,KAAKuB,MAArBZ,EADF,EACEA,MAAMT,EADR,EACQA,SACb,OACI,yBAAKoC,UAAU,OACX,kBAAC,EAAD,CACIpC,SAAUA,EACVG,YAAaL,KAAKK,YAClBE,QAASP,KAAKO,UAClB,kBAAC,EAAD,CACII,MAAOA,EACPK,YAAahB,KAAKgB,mB,GA5EAR,aCDtC+B,IAASC,OACL,6BACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,U","file":"static/js/main.53e1b22d.chunk.js","sourcesContent":["// eslint-disable-next-line\r\nimport React, { Component } from 'react'\r\n\r\nexport default class Input extends Component {\r\n    render() {\r\n        return <div>\r\n            <label htmlFor=\"inp\">todolist</label>\r\n            <input\r\n                id=\"inp\"\r\n                ref={inp=>this.input=inp}\r\n                value={this.props.inpValue}\r\n                type=\"text\"\r\n                onChange={this.props.handlChange}\r\n            />\r\n            <button onClick={this.props.addTodo}>添加</button>\r\n        </div>\r\n    }\r\n}","// eslint-disable-next-line\r\nimport React, { Component } from 'react'\r\n\r\nexport default class List extends Component {\r\n    render() {\r\n        let arr1 = this.props.todos.filter(item=>item.done);\r\n        return(\r\n        <div>\r\n            <h2>正在进行{arr1.length}</h2>\r\n            <ul>\r\n                {this.props.renderTodos(false)}\r\n            </ul>\r\n            <h2>已经完成</h2>\r\n            <ul style={{color:3<2?'red':'green'}}>\r\n                {this.props.renderTodos(true)}\r\n            </ul>\r\n        </div>\r\n        )\r\n    }\r\n}","// eslint-disable-next-line\r\nimport React, { Component } from 'react'\r\nimport Input from './Input.js';\r\nimport List from './List.js';\r\n\r\nexport default class TodoList extends Component {\r\n    //初始化任务列表\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            inpValue:'',\r\n            todos:[\r\n\r\n            ]\r\n        }\r\n    }\r\n\r\n    handlChange=(e)=>{\r\n        this.setState({inpValue:e.target.value})\r\n    }\r\n\r\n\r\n    componentDidUpdate(){\r\n        localStorage.setItem(\r\n            'todos',\r\n            JSON.stringify(this.state.todos)\r\n        )\r\n    }\r\n\r\n    addTodo=()=>{\r\n        if(this.state.inpValue===''){//空值不会传入\r\n            return;\r\n        }\r\n        this.setState({\r\n            todos: [//加的是新的\r\n                {\r\n                    title: this.state.inpValue,\r\n                    done: false\r\n                },\r\n                ...this.state.todos//展开运算符\r\n            ]\r\n        })\r\n        this.setState({inpValue:''})\r\n    }\r\n    delTodo=(idx)=>{\r\n        this.setState({\r\n            todos:this.state.todos.filter((item,index)=>index !== idx)\r\n        })\r\n    }\r\n\r\n    toggle=(idx)=>{\r\n        let newTodos = JSON.parse(JSON.stringify(this.state.todos));\r\n        newTodos[idx].done = !newTodos[idx].done;\r\n        this.setState({\r\n            todos:newTodos\r\n        })\r\n    }\r\n    renderTodos=(done)=>{\r\n        // eslint-disable-next-line array-callback-return\r\n        return this.state.todos.map((todo,idx)=>{\r\n            if(done===todo.done){\r\n                return (\r\n                    <li>\r\n                    <input onClick={()=>this.toggle(idx)} checked={done} type=\"checkbox\" />\r\n                    <span>{todo.title}</span>\r\n                    <button onClick={()=>this.delTodo(idx)}>删除</button>\r\n                </li>\r\n                )\r\n            }\r\n        })\r\n    }\r\n    render() {\r\n        const {todos,inpValue}=this.state;\r\n        return (\r\n            <div className=\"box\">\r\n                <Input\r\n                    inpValue={inpValue}\r\n                    handlChange={this.handlChange}\r\n                    addTodo={this.addTodo} />\r\n                <List\r\n                    todos={todos}\r\n                    renderTodos={this.renderTodos} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","// eslint-disable-next-line\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport TodoList from './components/TodoList';\r\nReactDOM.render(\r\n    <div>\r\n        <TodoList/>\r\n    </div>,\r\n    document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n\r\n// alt shift + 上下键   复制一行\r\n// alt + 上下键         移动一行\r\n// 按住alt ，鼠标点击\r\n// Ctrl + shift + 左右键，选中整个单词\r\n// ctrl+shift+L \r\n\r\n// 组件声明\r\n// 函数组件\r\n// UI（展示）组件，木偶组件\r\n// function App(props){\r\n//   const { title, id } = props;\r\n//   return <div>\r\n//     <h1>App组件内容</h1>\r\n//     <div>{title}</div>\r\n//     <div>{id}</div>\r\n//   </div>\r\n// }\r\n// // 智能组件\r\n// class Demo extends React.Component{\r\n//   constructor(){\r\n//      super();\r\n//     //  声明状态\r\n//      this.state = {\r\n//        name: new Date().toLocaleString()\r\n//      }\r\n//      setInterval(()=>{\r\n//       this.setState({name:new Date().toLocaleString()})\r\n//      },1000)\r\n//   }\r\n//   render(){\r\n//     return <div>\r\n//       <div>name:{this.state.name}</div>\r\n//       <App title={this.state.name} id='app'/>\r\n//     </div>\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n// let ele = React.createElement(\r\n//   'h1',\r\n//   {id:'title'},\r\n//   React.createElement('div',{},'hello'),\r\n//   'react'\r\n// )\r\n\r\n// 将jsx对象渲染到DOM中\r\n// let ReactDOM = {\r\n//   render(eleObj,container){\r\n//     // 解构\r\n//     const { type,props } = eleObj;\r\n//     // 创建第一层节点\r\n//     let ele = document.createElement(type);\r\n//     // 遍历属性对象，将属性添加到第一层节点对象上\r\n//     for (const prop in props) {\r\n//       console.log(prop)\r\n//       if(prop == 'children'){\r\n//         if(typeof props.children == 'string'){\r\n//             const txtNode = document.createTextNode(props.children);\r\n//             ele.appendChild(txtNode);\r\n//             break;\r\n//         }\r\n//         // 将第一层节点对象的子元素添加进去\r\n//         props.children.forEach( child => {\r\n//           if(typeof child == 'string'){\r\n//             const txtNode = document.createTextNode(child);\r\n//             ele.appendChild(txtNode);\r\n//           }else{\r\n//             ReactDOM.render(child,ele);\r\n//           }\r\n//         })\r\n//       }else{\r\n//         ele[prop] = props[prop];\r\n//       }\r\n//     }\r\n\r\n//     // 将第一层DOM节点添加到container中\r\n//     container.appendChild(ele);\r\n//   }\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n  // 1、原生JS，DOM操作（jQ）\r\n  // 2、React：开发效率高、性能高\r\n  // 3、环境搭建、创建一个项目、运行\r\n  // 4、JSX语法\r\n\r\n  \r\n\r\n\r\n"],"sourceRoot":""}